"use strict";

// TODO replace with https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/page-worker#contentURL
// or https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/frame_hidden-frame
const tabs = require("sdk/tabs");
const {setTimeout} = require("sdk/timers");
const data =  require("sdk/self").data;

// this page does HTTP 302 to the destination URL if the user is already logged in
const TWITTER_APP_LOGIN_PAGE = "https://twitter.com/login?redirect_after_login=https%3A//apps.twitter.com/app/new";

const TWITTER_ASSISTANT_APP_NAME_PREFIX = 'TAssistant';
const TWITTER_APP_NAME_MAX_LENGTH = 32;

function randomString(length){
    var chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    
    return Array(length).fill()
        .map(() => chars[ Math.floor(chars.length*Math.random()) ])
        .join('');
}


module.exports = function(username){
    
    const tabP = new Promise((resolve, reject) => {
        tabs.once('open', resolve); // this looks racy. What if a tab opens before mine?
        tabs.open( TWITTER_APP_LOGIN_PAGE ); 
    });
    
    return tabP.then(tab => {
        
        var loggedinP = new Promise((resolve, reject) => {
            tab.once('ready', () => {
                resolve(tab);
            })
        });
        
        // fill in the app creation form and submit it
        var appCreatedP = loggedinP.then(tab => {
            var appName = TWITTER_ASSISTANT_APP_NAME_PREFIX + '-' + username + '-';
            appName = appName + randomString(TWITTER_APP_NAME_MAX_LENGTH - appName.length);
            
            var worker = tab.attach({
                contentScriptFile: data.url('createTwitterApp/fillInAppCreationForm.js'),
                contentScriptOptions: {
                    // needs to be globally unique and below 32 chars
                    name: appName, 
                    // 10-200 chars
                    description: 'Application automatically generated by the Twitter Assistant browser add-on. (private use only)', 
                    // maybe make this URL a documentation page to what's going on eventually
                    website: 'https://github.com/DavidBruant/Twitter-Assistant'
                    
                }
            });
            
            return new Promise((resolve, reject) => {
                worker.once('detach', () => {
                    tab.once('ready', () => {

                        console.log('detached', tab.title, tab.url);
                        if(tab.title.contains(appName)){
                            console.log("victory! app created!", appName);
                            resolve(tab);
                        }
                        else{
                            reject(new Error('problem while trying to create app'));
                        }

                    });
                });
            
            });
            
        });

        var twitterAppAPICredentialsP = appCreatedP.then(tab => {
            return new Promise((resolve, reject) => {
                tab.once('ready', () => {
                    var worker = tab.attach({
                        contentScriptFile: data.url('createTwitterApp/collectTwitterAppAPICredentials.js')
                    });

                    worker.port.on('credentials', credentials => {
                        resolve(credentials);
                    });
            
                    worker.port.on('error', error => {
                        console.log('content script credentials error', error);
                        reject(error);
                    });
                })

                tab.url += '/keys';
            });
            
        });

        // TODO should be twitterAppAPICredentialsP.finally when that's supported
        function closeTab(){
            tabP.then(tab => tab.close());
        }
        twitterAppAPICredentialsP.then(closeTab).catch(closeTab);
        
        return twitterAppAPICredentialsP;
    });
    

    
};

